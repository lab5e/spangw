// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gateway/v1/spangw.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGatewayServiceClient is the client API for UserGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGatewayServiceClient interface {
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (UserGatewayService_ControlStreamClient, error)
}

type userGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGatewayServiceClient(cc grpc.ClientConnInterface) UserGatewayServiceClient {
	return &userGatewayServiceClient{cc}
}

func (c *userGatewayServiceClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (UserGatewayService_ControlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserGatewayService_ServiceDesc.Streams[0], "/gateway.v1.UserGatewayService/ControlStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGatewayServiceControlStreamClient{stream}
	return x, nil
}

type UserGatewayService_ControlStreamClient interface {
	Send(*ControlStreamRequest) error
	Recv() (*ControlStreamResponse, error)
	grpc.ClientStream
}

type userGatewayServiceControlStreamClient struct {
	grpc.ClientStream
}

func (x *userGatewayServiceControlStreamClient) Send(m *ControlStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGatewayServiceControlStreamClient) Recv() (*ControlStreamResponse, error) {
	m := new(ControlStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserGatewayServiceServer is the server API for UserGatewayService service.
// All implementations should embed UnimplementedUserGatewayServiceServer
// for forward compatibility
type UserGatewayServiceServer interface {
	ControlStream(UserGatewayService_ControlStreamServer) error
}

// UnimplementedUserGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserGatewayServiceServer struct {
}

func (UnimplementedUserGatewayServiceServer) ControlStream(UserGatewayService_ControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}

// UnsafeUserGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGatewayServiceServer will
// result in compilation errors.
type UnsafeUserGatewayServiceServer interface {
	mustEmbedUnimplementedUserGatewayServiceServer()
}

func RegisterUserGatewayServiceServer(s grpc.ServiceRegistrar, srv UserGatewayServiceServer) {
	s.RegisterService(&UserGatewayService_ServiceDesc, srv)
}

func _UserGatewayService_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserGatewayServiceServer).ControlStream(&userGatewayServiceControlStreamServer{stream})
}

type UserGatewayService_ControlStreamServer interface {
	Send(*ControlStreamResponse) error
	Recv() (*ControlStreamRequest, error)
	grpc.ServerStream
}

type userGatewayServiceControlStreamServer struct {
	grpc.ServerStream
}

func (x *userGatewayServiceControlStreamServer) Send(m *ControlStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGatewayServiceControlStreamServer) Recv() (*ControlStreamRequest, error) {
	m := new(ControlStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserGatewayService_ServiceDesc is the grpc.ServiceDesc for UserGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1.UserGatewayService",
	HandlerType: (*UserGatewayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _UserGatewayService_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gateway/v1/spangw.proto",
}
